2018/06/30 17:00-
DevOps勉強会

パッケージを1回きり渡して終わりで済まないことが増えてきた
継続にメンテしなければいけないことが増えた
脆弱性、機能追加への対応への速度に耐えうるようにしたい

アジャイルな開発を取り入れた
今まではウォーターフォールだったが、SIでもアジャイルを取り入れるところ増えてきた
ビジネスに対するスピード感
新しいものを作りたい　ex.AI作ってるんだぜ、ふわっとした要望、マーケティング
企画サイドの要望に耐えうる枠組み作り

アプリ開発は機能追加や仕様変更に大変な思いをしている

運用にも大きな負担が発生する
運用：日々の作業を円滑に進めること
変化＝作業者のコスト上がる、学習コスト
作業内容に対するドキュメントの追従(レビューが大変な会社もある)
ITILはまだ古い枠組み
開発活発→デプロイが週1回も(運用からするとなめてんのか)
開発　運用にコストかけたくないと言っているのに

運用はなるべく変化を入れたくない

開発や運用の本来の目的

開発：価値を作り続けることに意味がある
機能追加、バグ対応

運用：価値を届け続けることに意味がある

どちらもビジネスに応えるための手段

DevOpsとは？
よく耳にする言葉
アジャイル開発
マイクロサービスアーキテクチャ
クラウド
Infrastructure as Code
構成管理
自動化
CI/CDパイプライン
ログ・データの可視化

ビジネスの価値を顧客に届けるために開発と運用が一丸となって動こうとする考え方
思想
協力し合うことで、チーム・部署間で生じるオーバーヘッドを減らすために動くこと
具体的な定義はない
ここ10年で大体の枠組みが決まりつつある

DevOpsによくある勘違い
具体的な手法ではない
CI/CD、コンテナ、クラウドなどを導入するには準備が必要
今のシステムにいきなり突っ込んでも幸せにはならない
ただの無計画な自動化は属人化を生む
自動化スクリプトを誰かが作った、他の人がメンテできない(秘伝のタレ)
自己満足だけで作ったシェルスクリプトではDevOpsではない

DevOpsを理解した人が組織やチームの仕組みを少しずつ変えていく必要あり
入れるべきか、入れざるべきかを考えて、検討して導入する
本質を理解して

アプリ開発

マイクロサービスアーキテクチャ
継続的に変更を加えるためにはアプリケーション設計も重要
1コードの変化が10アプリに影響するのはだめ
疎結合で責務を分けたコード
1ファイルのindex.phpで全てを処理するはアンチ中のアンチ
認証周りの処理はちゃんと実績のあるフレームワークを使う
自分で一から作るより、実績のあるフレームワークを使う
時間をかけていろんな人を説得する
パッケージ管理システム

テスト
規模が大きいほど、テストの規模が大きくなる
人的負担を減らすためにもテストをきちんと書いて不要なミス減らす
余計な負担を他の人にさせない
テスト自動化によって完全にバグを防げることはないが、
大部分は防ぐことはできる
くだらないミスを減らして、本来の業務に集中できるように
テストそのものを書くコストはかかるのでカバレッジをどこまで取るか考えることは大事

Gitなど
規模が大きければGitにした方が良い
複数人での開発を最初から意識した分散型バージョン管理システム
実績：Linuxカーネル、主要なアプリフレームワークの多くはGit
誰が、いつ、なんのために変更を加えたか履歴を残す
問題があった場合に簡単に切りもどしができる
GitHub, GitHub Enterprise(オンプレ用), GitLabなど
コストかかる場合、ローカルでGit立てる(SVNみたいな使い方)

CIツール
継続的インテグレーション
Git, テストコードと連携して、コードに変更が加えられたら
自動でテストが走るような仕組みを作ることができる
継続的インテグレーションによって、「変更は悪だ」という気持ちを大幅に低減できる

アプリケーションデプロイの仕組みを変える
デプロイの自動化
CIツールにはパイプラインやワークフローと言った機能がある
ある動作を実行させて成功したら次に行くというフロー
テストが入って問題なければ開発環境にデプロイするなど
人の手による温かみのあるデプロイは時間もかかるしミスもある

インフラの仕組みを変える
クラウド vs オンプレ
dropboxは一回クラウドに移行したがオンプレに戻った
クラウド万能説はだめ、なんの目的で
ある一定数の規模を越えるとオンプレの方が良いと思う

Infrastructure as Codeと構成管理
構成管理の自動化(ネットワークとかサーバの管理をコードベースで)
構成管理ツールでコード書いてリモートで流し込む
Ansible, Terraform, Chef
人の手による温かみのある物理マシンの調達は極力避けたい
構成管理をコード化　Git管理することで何がいつ行われたか明確になる
コンテナ化(Docker)、クラウドネイティブ化はこの１つの手段にしかない
Dockerは万能ではい、強みを知った上で導入有無を議論し、判断する
まずはローカルや開発環境と言った小さいところからはじめて行く
ちょっとずつがアジャイル、いきなり大きくではなく

ログの可視化・スケーリング
構成管理やインフラ自動化することでできることの一つ
スケーラブルな構成にできるので可用性担保しやすい
ログを可視化ツールに食わせることでモニタリングのコスト抑える
可視化によってユーザや各担当者の動きが読めるようになる
いらない機能の削除やパフォーマンス改善のための大きな参考資料になる
kibana
目視は絶対だめ、特にスピード感求められる時代では

チームの考え方を変える
変化も今までの構成も悪ではない
よく昔の構成に文句をいう人がいるが、それは違う
クソコードでも実際それで動いているし、その人も事情があってそれになっているのかも
今の最新が10年後にはレガシーになる可能性も
今までの構成の良さを活かしながら、新しい構成も考える
人も構成も敬意を払って仕事したい
人をリスペクトする
結局人と人とのつながりに帰結する

チームビルディング
仕組みが変わるということは、人の考え方も変える必要がある
自動化は悪、変化は悪と思っている人たちに変化を強要するのは難しい
なぜそうすべきなのか、きちんと上長なども交えて真剣に時間をかけて議論する覚悟
可能であれば、日々のインフラとは別部隊を作って徐々に移行するのが望ましい
(日々の業務への影響度もあるので)

まとめ
DevOpsは開発が開発に、運用が運用に集中するために
互いに取らなければならない歩み寄りの動き、文化
継続的に価値を提供し続けるべきサービスかどうか見極める
社内に理解してくれる人を広める
開発・運用の協力体制を作る
既存案件におけるDevOps実現への道のりは長い

DevOpsは文化


道のりは長い…
どこから風穴開けるか？
自分がどういうステークホルダーなのか
開発側だったらGitの導入とか

運用的にはデプロイの自動化
では、誰がやる？
ギリギリのコストでやっている運用の人たちには負担大きいので
別チーム作る方が現実的では

ステークホルダーが多ければ多いほど難しい
時間をかけて説得する必要あり
こいつ頭おかしいじゃねーのと思われながらも発信し続ける

Q. 具体的な手法の方の質問で恐縮なんですが、
静的解析やテストとかって全部CIの中で回されてます？
エディタとかでもサポートされてたりとかで、
あんまり具体的にどうするってのが情報あまり無いように感じてるので意見を是非聞きたい
→スクリプト型、コンパイル型でも変わっている

導入できたかも委員会
導入できなかった振り返り会
ex.ExcelのWBSをRedmineに置き換えようとしたら落とされた話
　どうやればよかったのか？
